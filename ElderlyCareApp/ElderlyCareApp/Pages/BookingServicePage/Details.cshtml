@page
@using DAL.Common
@model ElderlyCareApp.Pages.BookingServicePage.DetailsModel

@{
    ViewData["Title"] = "Details";
    Layout = "_CustomerLayout";
}

<h1 class="text-center">Booking Details</h1>
<p class="text-success">@TempData["FeedbackSuccess"]</p>
<div class="container">
    <div class="card shadow-lg p-4 my-4">
        <dl class="row">
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Booking.ScheduleDate)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Booking.ScheduleDate)
            </dd>

            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Booking.Status)
            </dt>
            <dd class="col-sm-9">
                @{
                    string statusClass = Model.Booking.Status switch
                    {
                        Constants.Confirmed => "text-primary",
                        Constants.Processing => "text-warning",
                        Constants.Completed => "text-success",
                        Constants.Cancelled => "text-danger",
                        _ => "text-secondary"
                    };
                }
                <span class="@statusClass rounded">
                    @Model.Booking.Status
                </span>
            </dd>

            <dt class="col-sm-3">
                Note
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Booking.AdminNote)
            </dd>

            <dt class="col-sm-3 pt-1">
                @Html.DisplayNameFor(model => model.Booking.CaregiverName)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Booking.CaregiverName)
            </dd>

            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Booking.ServiceName)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Booking.ServiceName)
            </dd>
        </dl>

        @if (Model.Booking?.Status == Constants.Completed)
        {
            <button class="btn btn-info mt-3" data-bs-toggle="modal" data-bs-target="#feedbackModal">Feedback</button>
        }
    </div>

    <div class="text-center mt-4">
        <a asp-page="/Booking/BookingList" class="btn btn-secondary">Back to List</a>
    </div>
</div>

<div class="modal fade" id="feedbackModal" tabindex="-1" aria-labelledby="feedbackModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Feedback</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="SubmitFeedback">
                    <input type="hidden" name="id" value="@Model.Booking.Id" />
                    <div class="mb-3">
                        <label>Rating Score</label>
                        <div class="star-rating" id="starRating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <span class="star" data-value="@i">&#9733;</span>
                            }
                        </div>
                        <input type="hidden" id="ratingScore" name="ratingScore">
                    </div>
                    <div class="mb-3">
                        <label>Review</label>
                        <textarea class="form-control" name="review" rows="2" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const stars = document.querySelectorAll(".star");
            const ratingScore = document.getElementById("ratingScore");

            stars.forEach(star => {
                star.addEventListener("click", function () {
                    const value = parseInt(this.getAttribute("data-value"));
                    ratingScore.value = value;
                    highlightStars(value);
                });
            });

            function highlightStars(value) {
                stars.forEach((star, index) => {
                    if (index < value) {
                        star.classList.add("text-warning");
                    } else {
                        star.classList.remove("text-warning");
                    }
                });
            }
        });
    </script>
    <style>
        .star {
            font-size: 1.5rem;
            cursor: pointer;
            color: #ccc;
        }

            .star.text-warning {
                color: #ffc107;
            }
    </style>
}
